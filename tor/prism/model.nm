csg
//ISSRE 2024

player Pnd  GeneratedDecisiontree endplayer //System model
player Pat  PDT endplayer //Attacks  model
player Ph1  ASASpecialist endplayer //ASA Specialist
player Ph2  FirewallSecuritySpecialist endplayer //Firewall Security Specialist
player Ph3  VPNSecuritySpecialist endplayer //VPN Specialist
player Ph4  IPSSecuritySpecialist endplayer //IPS Specialist

const int UP =1;
const int DOWN =-1;
const double PH;
const double TM;
const double WL;

const int DDOS =1;
const int ARP =2;
const int MITM =3;

const double cost; //The cost of winning

const int type; //Attacks type

const k; // number of rounds

// module to count the rounds
module rounds

	rounds : [0..k+1];
	
	[] rounds<=k -> (rounds'=rounds+1);
	[] rounds=k+1 -> true;

endmodule

//System Model
module GeneratedDecisiontree
PP : [-1..1] init 0 ;
[rule1] PH<=2.5 & PH<=1.5 -> 1.0:(PP'=UP) ;
[rule2] PH<=2.5 & PH>1.5 & WL<=2.5 -> 1.0:(PP'=UP) ;
[rule3] PH<=2.5 & PH>1.5 & WL>2.5 & TM<=1.5 -> 0.2:(PP'=DOWN)  + 0.8:(PP'=UP) ;
[rule4] PH<=2.5 & PH>1.5 & WL>2.5 & TM>1.5 & TM<=2.5 -> 0.6666666666666666:(PP'=DOWN)  + 0.3333333333333333:(PP'=UP) ;
[rule5] PH<=2.5 & PH>1.5 & WL>2.5 & TM>1.5 & TM>2.5 -> 0.4:(PP'=DOWN)  + 0.6:(PP'=UP) ;
[rule6] PH>2.5 -> 1.0:(PP'=DOWN) ;
endmodule



//Attacks Model 
module PDT
	success : [-1..1] init -1 ;
	//done : [0..1] init 1 ;
	[att_rule1] type=DDOS -> 0.49854227405247814:(success'=0)   + 0.5014577259475219:(success'=1)  ; //ddos
	[att_rule2] type=ARP -> 0.49117647058823527:(success'=0)   + 0.5088235294117647:(success'=1)  ; //arp spoofing
	[att_rule3] type=MITM -> 0.4921135646687697:(success'=0)  + 0.5078864353312302:(success'=1)  ; //MitM
endmodule


module ASASpecialist
	[Ph1_prob_not] true -> true;
	[Ph1_almo_cer] true -> true;
endmodule

module FirewallSecuritySpecialist
	[Ph2_prob_not] true -> true;
	[Ph2_almo_cer] true -> true;
endmodule

module VPNSecuritySpecialist
	[Ph3_prob_not] true -> true;
	[Ph3_impossib] true -> true;
	[Ph3_almo_cer] true -> true;
endmodule

module IPSSecuritySpecialist
	[Ph4_almo_cer] true -> true;
endmodule


//register
module RegisterASASpecialist 

        win_asa : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[Ph1_prob_not,rule1,att_rule1] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ; 
	[Ph1_prob_not,rule1,att_rule2] true -> (win_asa'=0);
	[Ph1_prob_not,rule1,att_rule3] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ;

	[Ph1_prob_not,rule2,att_rule1] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ; 
	[Ph1_prob_not,rule2,att_rule2] true -> (win_asa'=0);
	[Ph1_prob_not,rule2,att_rule3] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ;

	[Ph1_prob_not,rule3,att_rule1] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ; 
	[Ph1_prob_not,rule3,att_rule2] true -> (win_asa'=0);
	[Ph1_prob_not,rule3,att_rule3] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ;

	[Ph1_prob_not,rule4,att_rule1] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ; 
	[Ph1_prob_not,rule4,att_rule2] true -> (win_asa'=0);
	[Ph1_prob_not,rule4,att_rule3] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ;

	[Ph1_prob_not,rule5,att_rule1] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ; 
	[Ph1_prob_not,rule5,att_rule2] true -> (win_asa'=0);
	[Ph1_prob_not,rule5,att_rule3] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ;

	[Ph1_prob_not,rule6,att_rule1] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ; 
	[Ph1_prob_not,rule6,att_rule2] true -> (win_asa'=0);
	[Ph1_prob_not,rule6,att_rule3] true -> 0.75:(win_asa'=1)+ 0.25:(win_asa'=0) ;

	[Ph1_almo_cer,rule1,att_rule1] true -> (win_asa'=0);
	[Ph1_almo_cer,rule1,att_rule2] true -> 0.93:(win_asa'=1)+ 0.07:(win_asa'=0) ;
	[Ph1_almo_cer,rule1,att_rule3] true -> (win_asa'=0);

	[Ph1_almo_cer,rule2,att_rule1] true -> (win_asa'=0);
	[Ph1_almo_cer,rule2,att_rule2] true -> 0.93:(win_asa'=1)+ 0.07:(win_asa'=0) ;
	[Ph1_almo_cer,rule2,att_rule3] true -> (win_asa'=0);

	[Ph1_almo_cer,rule3,att_rule1] true -> (win_asa'=0);
	[Ph1_almo_cer,rule3,att_rule2] true -> 0.93:(win_asa'=1)+ 0.07:(win_asa'=0) ;
	[Ph1_almo_cer,rule3,att_rule3] true -> (win_asa'=0);

	[Ph1_almo_cer,rule4,att_rule1] true -> (win_asa'=0);
	[Ph1_almo_cer,rule4,att_rule2] true -> 0.93:(win_asa'=1)+ 0.07:(win_asa'=0) ;
	[Ph1_almo_cer,rule4,att_rule3] true -> (win_asa'=0);

	[Ph1_almo_cer,rule5,att_rule1] true -> (win_asa'=0);
	[Ph1_almo_cer,rule5,att_rule2] true -> 0.93:(win_asa'=1)+ 0.07:(win_asa'=0) ;
	[Ph1_almo_cer,rule5,att_rule3] true -> (win_asa'=0);

	[Ph1_almo_cer,rule6,att_rule1] true -> (win_asa'=0);
	[Ph1_almo_cer,rule6,att_rule2] true -> 0.93:(win_asa'=1)+ 0.07:(win_asa'=0) ;
	[Ph1_almo_cer,rule6,att_rule3] true -> (win_asa'=0);
endmodule



//register
module RegisterFirewallSecuritySpecialist 

        win_fsa : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[Ph2_prob_not,rule1,att_rule1] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ; 
	[Ph2_prob_not,rule1,att_rule2] true -> (win_fsa'=0);
	[Ph2_prob_not,rule1,att_rule3] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ;

	[Ph2_prob_not,rule2,att_rule1] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ; 
	[Ph2_prob_not,rule2,att_rule2] true -> (win_fsa'=0);
	[Ph2_prob_not,rule2,att_rule3] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ;

	[Ph2_prob_not,rule3,att_rule1] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ; 
	[Ph2_prob_not,rule3,att_rule2] true -> (win_fsa'=0);
	[Ph2_prob_not,rule3,att_rule3] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ;

	[Ph2_prob_not,rule4,att_rule1] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ; 
	[Ph2_prob_not,rule4,att_rule2] true -> (win_fsa'=0);
	[Ph2_prob_not,rule4,att_rule3] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ;

	[Ph2_prob_not,rule5,att_rule1] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ; 
	[Ph2_prob_not,rule5,att_rule2] true -> (win_fsa'=0);
	[Ph2_prob_not,rule5,att_rule3] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ;

	[Ph2_prob_not,rule6,att_rule1] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ; 
	[Ph2_prob_not,rule6,att_rule2] true -> (win_fsa'=0);
	[Ph2_prob_not,rule6,att_rule3] true -> 0.75:(win_fsa'=1)+ 0.25:(win_fsa'=0) ;

	[Ph2_almo_cer,rule1,att_rule1] true -> (win_fsa'=0);
	[Ph2_almo_cer,rule1,att_rule2] true -> 0.93:(win_fsa'=1)+ 0.07:(win_fsa'=0) ;
	[Ph2_almo_cer,rule1,att_rule3] true -> (win_fsa'=0);

	[Ph2_almo_cer,rule2,att_rule1] true -> (win_fsa'=0);
	[Ph2_almo_cer,rule2,att_rule2] true -> 0.93:(win_fsa'=1)+ 0.07:(win_fsa'=0) ;
	[Ph2_almo_cer,rule2,att_rule3] true -> (win_fsa'=0);

	[Ph2_almo_cer,rule3,att_rule1] true -> (win_fsa'=0);
	[Ph2_almo_cer,rule3,att_rule2] true -> 0.93:(win_fsa'=1)+ 0.07:(win_fsa'=0) ;
	[Ph2_almo_cer,rule3,att_rule3] true -> (win_fsa'=0);

	[Ph2_almo_cer,rule4,att_rule1] true -> (win_fsa'=0);
	[Ph2_almo_cer,rule4,att_rule2] true -> 0.93:(win_fsa'=1)+ 0.07:(win_fsa'=0) ;
	[Ph2_almo_cer,rule4,att_rule3] true -> (win_fsa'=0);

	[Ph2_almo_cer,rule5,att_rule1] true -> (win_fsa'=0);
	[Ph2_almo_cer,rule5,att_rule2] true -> 0.93:(win_fsa'=1)+ 0.07:(win_fsa'=0) ;
	[Ph2_almo_cer,rule5,att_rule3] true -> (win_fsa'=0);

	[Ph2_almo_cer,rule6,att_rule1] true -> (win_fsa'=0);
	[Ph2_almo_cer,rule6,att_rule2] true -> 0.93:(win_fsa'=1)+ 0.07:(win_fsa'=0) ;
	[Ph2_almo_cer,rule6,att_rule3] true -> (win_fsa'=0);
endmodule



//register
module RgisterVPNSecuritySpecialist 

        win_vpn : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[Ph3_prob_not,rule1,att_rule1] true -> 0.75:(win_vpn'=1)+ 0.25:(win_vpn'=0) ; 
	[Ph3_prob_not,rule1,att_rule2] true -> (win_vpn'=0);
	[Ph3_prob_not,rule1,att_rule3] true -> (win_vpn'=0);

	[Ph3_prob_not,rule2,att_rule1] true -> 0.75:(win_vpn'=1)+ 0.25:(win_vpn'=0) ; 
	[Ph3_prob_not,rule2,att_rule2] true -> (win_vpn'=0);
	[Ph3_prob_not,rule2,att_rule3] true -> (win_vpn'=0);

	[Ph3_prob_not,rule3,att_rule1] true -> 0.75:(win_vpn'=1)+ 0.25:(win_vpn'=0) ; 
	[Ph3_prob_not,rule3,att_rule2] true -> (win_vpn'=0);
	[Ph3_prob_not,rule3,att_rule3] true -> (win_vpn'=0);

	[Ph3_prob_not,rule4,att_rule1] true -> 0.75:(win_vpn'=1)+ 0.25:(win_vpn'=0) ; 
	[Ph3_prob_not,rule4,att_rule2] true -> (win_vpn'=0);
	[Ph3_prob_not,rule4,att_rule3] true -> (win_vpn'=0);

	[Ph3_prob_not,rule5,att_rule1] true -> 0.75:(win_vpn'=1)+ 0.25:(win_vpn'=0) ; 
	[Ph3_prob_not,rule5,att_rule2] true -> (win_vpn'=0);
	[Ph3_prob_not,rule5,att_rule3] true -> (win_vpn'=0);

	[Ph3_prob_not,rule6,att_rule1] true -> 0.75:(win_vpn'=1)+ 0.25:(win_vpn'=0) ; 
	[Ph3_prob_not,rule6,att_rule2] true -> (win_vpn'=0);
	[Ph3_prob_not,rule6,att_rule3] true -> (win_vpn'=0);

//
	[Ph3_impossib,rule1,att_rule1] true -> (win_vpn'=0); 
	[Ph3_impossib,rule1,att_rule2] true -> 0.07:(win_vpn'=1)+ 0.93:(win_vpn'=0) ; 
	[Ph3_impossib,rule1,att_rule3] true -> (win_vpn'=0); 

	[Ph3_impossib,rule2,att_rule1] true -> (win_vpn'=0); 
	[Ph3_impossib,rule2,att_rule2] true -> 0.07:(win_vpn'=1)+ 0.93:(win_vpn'=0) ; 
	[Ph3_impossib,rule2,att_rule3] true -> (win_vpn'=0);

	[Ph3_impossib,rule3,att_rule1] true -> (win_vpn'=0); 
	[Ph3_impossib,rule3,att_rule2] true -> 0.07:(win_vpn'=1)+ 0.93:(win_vpn'=0) ; 
	[Ph3_impossib,rule3,att_rule3] true -> (win_vpn'=0);

	[Ph3_impossib,rule4,att_rule1] true -> (win_vpn'=0); 
	[Ph3_impossib,rule4,att_rule2] true -> 0.07:(win_vpn'=1)+ 0.93:(win_vpn'=0) ; 
	[Ph3_impossib,rule4,att_rule3] true -> (win_vpn'=0);

	[Ph3_impossib,rule5,att_rule1] true -> (win_vpn'=0); 
	[Ph3_impossib,rule5,att_rule2] true -> 0.07:(win_vpn'=1)+ 0.93:(win_vpn'=0) ; 
	[Ph3_impossib,rule5,att_rule3] true -> (win_vpn'=0);

	[Ph3_impossib,rule6,att_rule1] true -> (win_vpn'=0); 
	[Ph3_impossib,rule6,att_rule2] true -> 0.07:(win_vpn'=1)+ 0.93:(win_vpn'=0) ; 
	[Ph3_impossib,rule6,att_rule3] true -> (win_vpn'=0);


//

	[Ph3_almo_cer,rule1,att_rule1] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule1,att_rule2] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule1,att_rule3] true -> 0.93:(win_vpn'=1)+ 0.07:(win_vpn'=0) ;

	[Ph3_almo_cer,rule2,att_rule1] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule2,att_rule2] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule2,att_rule3] true -> 0.93:(win_vpn'=1)+ 0.07:(win_vpn'=0) ;

	[Ph3_almo_cer,rule3,att_rule1] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule3,att_rule2] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule3,att_rule3] true -> 0.93:(win_vpn'=1)+ 0.07:(win_vpn'=0) ;

	[Ph3_almo_cer,rule4,att_rule1] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule4,att_rule2] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule4,att_rule3] true -> 0.93:(win_vpn'=1)+ 0.07:(win_vpn'=0) ;

	[Ph3_almo_cer,rule5,att_rule1] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule5,att_rule2] true -> 0.93:(win_vpn'=1)+ 0.07:(win_vpn'=0) ;
	[Ph3_almo_cer,rule5,att_rule3] true -> 0.93:(win_vpn'=1)+ 0.07:(win_vpn'=0) ;

	[Ph3_almo_cer,rule6,att_rule1] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule6,att_rule2] true -> (win_vpn'=0);
	[Ph3_almo_cer,rule6,att_rule3] true -> 0.93:(win_vpn'=1)+ 0.07:(win_vpn'=0) ;
endmodule

module RegisterIPSSecuritySpecialist

        win_ips : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[Ph4_almo_cer,rule1,att_rule1] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule1,att_rule2] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule1,att_rule3] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;

	[Ph4_almo_cer,rule2,att_rule1] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule2,att_rule2] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule2,att_rule3] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;

	[Ph4_almo_cer,rule3,att_rule1] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule3,att_rule2] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule3,att_rule3] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;

	[Ph4_almo_cer,rule4,att_rule1] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule4,att_rule2] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule4,att_rule3] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;

	[Ph4_almo_cer,rule5,att_rule1] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule5,att_rule2] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule5,att_rule3] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;

	[Ph4_almo_cer,rule6,att_rule1] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule6,att_rule2] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;
	[Ph4_almo_cer,rule6,att_rule3] true -> 0.93:(win_ips'=1)+ 0.07:(win_ips'=0) ;

endmodule


label  "win"= win_ips=1 & win_vpn=1 & win_fsa=1 & win_asa=1;

formula win= win_ips=1 & win_vpn=1 & win_fsa=1 & win_asa=1;

label "fail"= win_ips=0 | win_vpn=0 | win_fsa=0 | win_asa=0;

formula fail= win_ips=0 | win_vpn=0 | win_fsa=0 | win_asa=0;

// Reward structure for ASA Specialist
rewards "utilityASA"
  // win_asa = 1: cost  // Successful ASA interventions
  win_asa = 1: cost  ;  // Reward for successful ASA interventions 
  // win_asa = 0: -cost // Unsuccessful ASA interventions
  win_asa = 0: -cost;  // Penalty for unsuccessful ASA interventions
endrewards

// Reward structure for Firewall Security Specialist
rewards "utilityFSA"
  // win_fsa = 1: cost  // Successful firewall interventions
  win_fsa = 1: cost;  // Reward for successful firewall interventions 
  // win_fsa = 0: -cost // Unsuccessful firewall interventions
  win_fsa = 0: -cost;  // Penalty for unsuccessful firewall interventions
endrewards

// Reward structure for VPN Specialist
rewards "utilityVPN"
  // win_vpn = 1: cost  // Successful VPN interventions
  win_vpn = 1: cost;  // Reward for successful VPN interventions 
  // win_vpn = 0: -cost // Unsuccessful VPN interventions
  win_vpn = 0: -cost;  // Penalty for unsuccessful VPN interventions
endrewards

// Reward structure for IPS Specialist
rewards "utilityIPS"
  // win_ips = 1: cost  // Successful IPS interventions
  win_ips = 1: cost;  // Reward for successful IPS interventions 
 // win_ips = 0: -cost // Unsuccessful IPS interventions
  win_ips = 0: -cost;  // Penalty for unsuccessful IPS interventions
endrewards


// Reward structure for  Specialists
rewards "utilityWin"
  win : 1;  // Reward for successful  interventions 
endrewards

rewards "utilityFail"
  fail : 1;  // Reward for successful  interventions 
endrewards
