dtmc

// Constants with clear descriptions
const int MAX_QUEUE;  	 	 // Maximum size of the queue
const int FREQ = 4;       	// Frequency of successful payload transmission (adjust as needed)
const int EMPTY = 0;      	// Indicator for an empty queue
const bool active =true;
const bool inactive =false;
const int BAN_TIME = 4;  

module WVSensorSideModule

//BANING TIME
wv_t:[0..BAN_TIME] init BAN_TIME;

// True if device is in receiving mode (previously "receiving")
wv_receiving: bool init true;

// True if the latest received payload is correct
wv_correct_payload: bool init false;

// Transition for receiving a payload (previously "receive")
[wv_receive] wv_receiving   & wv_t>=BAN_TIME ->
  1/FREQ: (wv_correct_payload' = true) & (wv_receiving' = false)& (wv_t'= BAN_TIME )  // Successful transmission, update WV events
  + (1-1/FREQ): (wv_correct_payload' = false) & (wv_receiving' = false)& (wv_t'= 0 ) ; // Unsuccessful transmission, update WV events

[wv_wait] wv_receiving   & wv_t<BAN_TIME ->  (wv_t'= wv_t+1 );

// Transition for enqueuing the payload
[wv_enqueue] !wv_receiving -> (wv_correct_payload' = false) & (wv_receiving' = true); // Reset for next cycle

endmodule

// SensorSideModule with explicit state names, detailed comments, and renamed variables
module RPSensorSideModule
//BANING TIME
rp_t:[0..BAN_TIME] init BAN_TIME;

// True if device is in receiving mode
rp_receiving: bool init true;

// True if the latest received payload is correct
rp_correct_payload: bool init false;


// Transition for receiving a payload
[rp_receive] rp_receiving &  rp_t>=BAN_TIME  ->
  1/FREQ: (rp_correct_payload' = true) & (rp_receiving' = false)& (rp_t'= BAN_TIME )   // Successful transmission, update RP events
  + (1-1/FREQ): (rp_correct_payload' = false) & (rp_receiving' = false)& (rp_t'= 0 ); // Unsuccessful transmission, update RP events

[rp_wait] rp_receiving   & rp_t<BAN_TIME ->  (rp_t'= rp_t+1 );

// Transition for enqueuing the payload
[rp_enqueue] !rp_receiving -> (rp_correct_payload' = false) & (rp_receiving' = true); // Reset for next cycle


endmodule

// SensorSideModule with explicit state names, detailed comments, and WL variables
module WLSensorSideModule

//BANING TIME
wl_t:[0..BAN_TIME] init BAN_TIME;

// True if device is in receiving mode (previously "wv_receiving")
wl_receiving: bool init true;

// True if the latest received payload is correct
wl_correct_payload: bool init false;

// Transition for receiving a payload (previously "[wv_receive]")
[wl_receive] wl_receiving &  wl_t>=BAN_TIME  ->
  1/FREQ: (wl_correct_payload' = true) & (wl_receiving' = true)& (wl_t'= BAN_TIME )   // Successful transmission, update WL events
  + (1-1/FREQ): (wl_correct_payload' = false) & (wl_receiving' = true)& (wl_t'= 0 ); // Unsuccessful transmission, update WL events

// Transition for enqueuing the payload (previously "[wv_enqueue]")
[wl_enqueue] !wl_receiving -> (wl_correct_payload' = false) & (wl_receiving' = true); // Reset for next cycle

// WL activation (new action for WL)
[wl_wait]wl_receiving & wl_t<BAN_TIME->  (wl_t'=wl_t+1);


endmodule

// ExchangeModule with corrected logic, enhanced comments, WV variables, and WV-related updates
module QueueWVModule

// Number of correct values in the queue
wv_correctValue: [0..MAX_QUEUE] init 0;

// Number of incorrect values in the queue
wv_incorrectValue: [0..MAX_QUEUE] init 0;

// Indicates whether a tampered payload has been dequeued
wv_tampered_payload: bool init false;

// WV status (new variable for WV)
wv_status: bool init inactive;

// Enqueue operation considering queue limits, payload correctness, and WV status
[wv_enqueue]  wv_correctValue < MAX_QUEUE & wv_incorrectValue < MAX_QUEUE ->
  (wv_correctValue' = wv_correctValue + (wv_correct_payload ? 1 : 0)) &
  (wv_incorrectValue' = wv_incorrectValue + (!wv_correct_payload ? 1 : 0)) ; 

// Dequeue operation with probabilistic choice, queue underflow prevention, payload status update, and WV status
[wv_dequeue]  ((wv_correctValue > EMPTY) | (wv_incorrectValue > EMPTY)) ->
  // Probabilistic choice between correct and incorrect queues
  1/FREQ: (wv_correctValue' = max(0, wv_correctValue - 1)) & (wv_tampered_payload' = false) // Decrement correct queue, set payload integrity, update events
  + (1-1/FREQ): (wv_incorrectValue' = max(0, wv_incorrectValue - 1)) & (wv_tampered_payload' = true) ;  // Decrement incorrect queue, set payload tampered, update events

endmodule


// ExchangeModule with changes for WL
module QueueWLModule

// Number of correct values in the queue
wl_correctValue: [0..MAX_QUEUE] init 0;

// Number of incorrect values in the queue
wl_incorrectValue: [0..MAX_QUEUE] init 0;

// Indicates whether a tampered payload has been dequeued
wl_tampered_payload: bool init false;

// WL status
wl_status: bool init inactive;

// Enqueue operation considering queue limits, payload correctness, and WL status
[wl_enqueue] wl_correctValue < MAX_QUEUE & wl_incorrectValue < MAX_QUEUE ->
  (wl_correctValue' = wl_correctValue + (wl_correct_payload ? 1 : 0)) &
  (wl_incorrectValue' = wl_incorrectValue + (!wl_correct_payload ? 1 : 0));

// Dequeue operation with probabilistic choice, queue underflow prevention, payload status update, and WL status
[wl_dequeue] ((wl_correctValue > EMPTY) | (wl_incorrectValue > EMPTY)) ->
  // Probabilistic choice between correct and incorrect queues
  1/FREQ: (wl_correctValue' = max(0, wl_correctValue - 1)) & (wl_tampered_payload' = false)  // Decrement correct queue, set payload integrity
  + (1-1/FREQ): (wl_incorrectValue' = max(0, wl_incorrectValue - 1)) & (wl_tampered_payload' = true);  // Decrement incorrect queue, set payload tampered

endmodule

// ExchangeModule with changes for RP
module QueueRPModule

// Number of correct values in the queue
rp_correctValue: [0..MAX_QUEUE] init 0;

// Number of incorrect values in the queue
rp_incorrectValue: [0..MAX_QUEUE] init 0;

// Indicates whether a tampered payload has been dequeued
rp_tampered_payload: bool init false;

// RP status
rp_status: bool init inactive;

// Enqueue operation considering queue limits, payload correctness, and RP status
[rp_enqueue]  rp_correctValue < MAX_QUEUE & rp_incorrectValue < MAX_QUEUE ->
  (rp_correctValue' = rp_correctValue + (rp_correct_payload ? 1 : 0)) &  // Assuming "correct_payload" is defined elsewhere
  (rp_incorrectValue' = rp_incorrectValue + (!rp_correct_payload ? 1 : 0));

// Dequeue operation with probabilistic choice, queue underflow prevention, payload status update, and RP status
[rp_dequeue] ((rp_correctValue > EMPTY) | (rp_incorrectValue > EMPTY)) ->
  // Probabilistic choice between correct and incorrect queues
  1/FREQ: (rp_correctValue' = max(0, rp_correctValue - 1)) & (rp_tampered_payload' = false)  // Decrement correct queue, set payload integrity
  + (1-1/FREQ): (rp_incorrectValue' = max(0, rp_incorrectValue - 1)) & (rp_tampered_payload' = true);  // Decrement incorrect queue, set payload tampered

endmodule





label "tampered_payload"= wv_tampered_payload | wl_tampered_payload | rp_tampered_payload;



rewards "utility"
    [wv_dequeue] wv_correct_payload: 1;
    [rp_dequeue] rp_correct_payload: 1;
    [wl_dequeue] wl_correct_payload: 1;
endrewards
